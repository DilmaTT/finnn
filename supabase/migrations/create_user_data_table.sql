/*
  # Create user_data table

  This table stores user-specific application data, such as saved poker ranges, 
  training sessions, and statistics, linked to their authentication ID.

  1. New Tables
    - `user_data`
      - `id` (bigint, primary key, generated)
      - `user_id` (uuid, foreign key to `auth.users`, unique)
      - `folders` (jsonb)
      - `action_buttons` (jsonb)
      - `trainings` (jsonb)
      - `statistics` (jsonb)
      - `charts` (jsonb)
      - `created_at` (timestamptz)
      - `updated_at` (timestamptz)

  2. New Functions &amp; Triggers
    - `handle_updated_at()`: A function to automatically update the `updated_at` timestamp.
    - `on_user_data_updated`: A trigger that calls the function on each update.

  3. Security
    - Enable RLS on `user_data` table.
    - Add a comprehensive policy for users to manage their own data (select, insert, update, delete).
*/

-- Create the table to store user-specific data
CREATE TABLE IF NOT EXISTS public.user_data (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users(id) on delete cascade not null unique,
  folders jsonb,
  action_buttons jsonb,
  trainings jsonb,
  statistics jsonb,
  charts jsonb,
  created_at timestamptz default now() not null,
  updated_at timestamptz default now() not null
);

-- Create a function to automatically update the `updated_at` timestamp
CREATE OR REPLACE FUNCTION public.handle_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to execute the function before any update on the user_data table
DROP TRIGGER IF EXISTS on_user_data_updated ON public.user_data;
CREATE TRIGGER on_user_data_updated
  BEFORE UPDATE ON public.user_data
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_updated_at();

-- Enable Row Level Security on the table
ALTER TABLE public.user_data ENABLE ROW LEVEL SECURITY;

-- Create policies for RLS
DROP POLICY IF EXISTS "Allow users to manage their own data" ON public.user_data;
CREATE POLICY "Allow users to manage their own data"
  ON public.user_data
  FOR ALL
  TO authenticated
  USING (auth.uid() = user_id)
  WITH CHECK (auth.uid() = user_id);
